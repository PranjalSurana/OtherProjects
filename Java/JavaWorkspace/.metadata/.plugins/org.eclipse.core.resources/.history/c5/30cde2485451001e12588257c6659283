import java.util.List;

import java.math.BigDecimal;
import java.math.RoundingMode;

public class FilmArchive {

	private int maxStorageCapacity;
	private List<Film> film;
	
	public FilmArchive(int maxStorageCapacity, List<Film> film) {
		if(maxStorageCapacity < 0)
			throw new IllegalArgumentException("Enter a valid Maximum Storage Capacity!");
		if(maxStorageCapacity == 0)
			throw new IllegalArgumentException("Maximum Storage Capacity can't be zero!");
		this.maxStorageCapacity = maxStorageCapacity;
		this.film = film;
	}
	
	public List<Film> retrieveAllFilms() {
		return film;
	}
	
	public Film retrieveFilmById(int filmId) {
		if(filmId <= 0) {
			throw new IllegalArgumentException("Invalid Film ID");
		}
		for (Film f : film) {
			if (filmId == f.getFilmId()) {
				return f;
			}
		}
		return null;
	}
	
	public void addNewFilm(Film newFilm) {
		if(newFilm == null)
			throw new IllegalArgumentException("Film ")
		if(remainingStorageCapacity() == 0)
			throw new IllegalStateException("Film Archive Capacity is Full!");
		if(retrieveFilmById(newFilm.getFilmId()) != null)
			throw new IllegalStateException("Film with Id " + newFilm.getFilmId() + " already exists!");
		if(newFilm.capacityOfFilm() > remainingStorageCapacity())
			throw new IllegalStateException("Capacity of Given Film is More than Remaining Storage Capacity");
		film.add(newFilm);
	}
	
	public void deleteFilm(int filmId) {
		if(filmId <= 0) {
			throw new IllegalArgumentException("Invalid Film ID");
		}
		for (Film f : film) {
			if (filmId == f.getFilmId()) {
				film.remove(filmId);
				return;
			}
		}
		throw new IllegalStateException("Film Archive does not contain Film with ID " + filmId);
	}
	
	public int initialStorageCapacity() {
		return maxStorageCapacity;
	}
	
	public int numberOfFilmsInArchive() {
		return film.size();
	}
	
	public int remainingStorageCapacity() {
		int numberOfPhysicalFilmCapacity = 0;
		for(Film f: film) {
			numberOfPhysicalFilmCapacity += f.capacityOfFilm();
		}
		return maxStorageCapacity - numberOfPhysicalFilmCapacity;
	}
	
	public BigDecimal totalRunningTime() {
		BigDecimal numberOfHours = BigDecimal.ZERO;
		for(Film f: film) {			
			numberOfHours = numberOfHours.add(f.runningTime());// get total running time
		}
		return numberOfHours.setScale(2, RoundingMode.HALF_EVEN);
	}
	
}