package com.fidelity.ship;

import static org.junit.jupiter.api.Assertions.*;

import java.math.BigDecimal;
import java.time.LocalDate;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class SailorTest 
{
	private Sailor sailor;
	
	@BeforeEach
	void setUp() throws Exception {
	}

	@AfterEach
	void tearDown() throws Exception {
	}
	
	@Test
	void testCreateSailorSuccess()
	{
		String name ="Vish";
		sailor = new Sailor(name,1,30,"Engineer",BigDecimal.valueOf(100),100);
		assertEquals(name,sailor.getName());
	}
	
	@Test
	void testCreateSailorNullName()
	{
		assertThrows(IllegalArgumentException.class, () -> {
		sailor = new Sailor(null,1,30,"Engineer",BigDecimal.valueOf(100),100);
		});
	}
	
	@Test
	void testCreateSailorNegativehourlyPay()
	{
		String name ="Vish";
		assertThrows(IllegalArgumentException.class, () -> {
			sailor = new Sailor(name,1,30,"Engineer",BigDecimal.valueOf(-100),100);
			});
	}
	
	@Test
	void testCreateSailorNegativehoursWworked()
	{
		String name ="Vish";
		assertThrows(IllegalArgumentException.class, () -> {
			sailor = new Sailor(name,1,30,"Engineer",BigDecimal.valueOf(100),-100);
			});
	}
	
	@Test
	void testCreateSailorNullJobDescription()
	{
		String name ="Vish";
		assertThrows(IllegalArgumentException.class, () -> {
			sailor = new Sailor(name,1,30,null,BigDecimal.valueOf(100),100);
			});
	}
	
	@Test
	void testCalculatePay() 
	{
		String name ="Vish";
		sailor = new Sailor(name,1,30,"Engineer",BigDecimal.valueOf(100),100);
		assertEquals(BigDecimal.valueOf(10000.0000).setScale(2),sailor.calcPay(LocalDate.of(2023, 8, 31)));
	}
	
	@Test
	void testCalculatePayCurrLess() 
	{
		String name ="Vish";
		sailor = new Sailor(name,1,30,"Engineer",BigDecimal.valueOf(100),100);
		assertEquals(BigDecimal.valueOf(0000).setScale(2),sailor.calcPay(LocalDate.of(2023, 8, 3)));
	}

}
