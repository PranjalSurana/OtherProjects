package com.fidelity.payroll;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;

public abstract class Employee implements Comparable<Customer> {

	private String name;
	private LocalDate hireDate;

	public Employee(String name, LocalDate hireDate) {
		super();
		this.name = name;
		this.hireDate = hireDate;
	}
	
	public abstract BigDecimal calculateMonthlyPay();
	
	public BigDecimal calculateMonthlyPay(BigDecimal bonus) {
		return calculateMonthlyPay().add(bonus).setScale(2);
	}

	public BigDecimal calculatePayToDate(LocalDate date) {
		if (date == null) {
			return BigDecimal.ZERO.setScale(2);
		}

		long months = Math.max(0, ChronoUnit.MONTHS.between(hireDate, date));
		return calculateMonthlyPay().multiply(new BigDecimal(months)).setScale(2); 
	}

	public String getName() {
		return name;
	}

	public LocalDate getHireDate() {
		return hireDate;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((hireDate == null) ? 0 : hireDate.hashCode());
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Employee other = (Employee) obj;
		if (hireDate == null) {
			if (other.hireDate != null)
				return false;
		} else if (!hireDate.equals(other.hireDate))
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		return true;
	}

	@Override
	public String toString() {
		return "Employee [name=" + name + ", hireDate=" + hireDate + "]";
	}

}