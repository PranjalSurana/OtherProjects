package com.fidelity.ship;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThrows;
import static org.junit.jupiter.api.Assertions.*;

import java.lang.reflect.Executable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;


class FreightShipTest {

	private FreightShip frieghtShip;
	private List<CrewMember> crewTest;
	
	@BeforeEach
	void setUp() {
		crewTest = new ArrayList<>();
		crewTest.add(new Sailor(1, "sailor", 10, "Engineer", new BigDecimal("100"), 100));
		crewTest.add(new Officer(2, "officer", 10, "DGP", new BigDecimal("10000")));
		frieghtShip = new FreightShip(3, crewTest);
	}
	
//	@AfterEach
//	void tearDown() throws Exception {
//		frieghtShipTest = null;
//	}

	@Test
	@DisplayName("addCrewMember Test: Member Added Successfully")
	public void addCrewMemberTest_Success() {
		CrewMember mockSailor = new Sailor(2, "sssailor", 10, "Engineer", new BigDecimal("100"), 100);
		frieghtShip.addCrewMember(mockSailor);
		assertEquals(3, crewTest.size());
	}
	
	@Test
	@DisplayName("addCrewMember Test: Member Added Successfully")
	public void addCrewMemberTest_Failure_NullCrew() {
		assertThrows(IllegalStateException.class, () -> {
			frieghtShip.addCrewMember(null);
		});
	}
	
	@Test
	@DisplayName("addCrewMember Test: Exceeds Capacity")
	public void addCrewMemberTest_Failure_ExceedsCapacity() {
		CrewMember mockSailor = new Sailor(4, "sssailor", 10, "Engineer", new BigDecimal("100"), 100);
		frieghtShip.addCrewMember(mockSailor);
		CrewMember mockSailor1 = new Sailor(6, "sssailor", 10, "Engineer", new BigDecimal("100"), 100);
		assertThrows(IllegalStateException.class, () -> {
			frieghtShip.addCrewMember(mockSailor1);
		});
	}
	
	@Test
	@DisplayName("removeCrewMember Test: Member Removed Successfully")
	public void removeCrewMemberTest_Success() {
		frieghtShip.removeCrewMember(crewTest.get(0).id);
		assertEquals(1, crewTest.size());
	}
	
	@Test
	@DisplayName("removeCrewMember Test: Crew Size is 0")
	public void removeCrewMemberTest_Failure_ZeroCrew() {
		crewTest = new ArrayList<>();
		frieghtShip = new FreightShip(3, crewTest);
		assertThrows(IllegalStateException.class, () -> {
			frieghtShip.removeCrewMember(1);
		});			
	}
	
	@Test
	@DisplayName("removeCrewMember Test: InvalidId")
	public void removeCrewMemberTest_Failure_InvalidId() {
		assertThrows(IllegalStateException.class, () -> {
			frieghtShip.removeCrewMember(-1);
		});			
	}
	
	@Test
	@DisplayName("removeCrewMember Test: IdNotExists")
	public void removeCrewMemberTest_Failure_IdNotExists() {
		assertThrows(IllegalStateException.class, () -> {
			frieghtShip.removeCrewMember(4);
		});			
	}
	
	@Test
	@DisplayName("getMaxCapacity Test")
	void getMaxCapacityTest_Success() {
		assertEquals(3, frieghtShip.getMaxCapacity());
	}
	
	@Test
	@DisplayName("getRemainingCapacity Test")
	void getRemainingCapacityTest_Success() {
		assertEquals(1, frieghtShip.getRemainingCapacity());
	}
	
	@Test
	@DisplayName("getCurrentCrewNumber Test")
	void getCurrentCrewNumberTest_Success() {
		assertEquals(2, frieghtShip.getCurrentCrewNumber());
	}

}