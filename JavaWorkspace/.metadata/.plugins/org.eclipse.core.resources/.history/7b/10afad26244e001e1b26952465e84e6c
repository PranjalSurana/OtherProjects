package com.fidelity.payroll;

import java.util.ArrayList;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

class EmployeeUtilTest {

	private Employee[] emps;
	private List<Employee> emplist;

	@BeforeEach
	void setUp() {
		emps = new Employee[] {
			new FullTimeEmployee("John Smith", LocalDate.of(2018, 8, 18), new BigDecimal("120000.0")),
			new PartTimeEmployee("Captain Jack", LocalDate.of(2019, 1, 1), new BigDecimal("30.0"), 100),
			new Consultant("Rose Tyler", LocalDate.of(2018, 7, 11), new BigDecimal("150000.0"), 10)
		};

		emplist = new ArrayList<>();
		emplist.add(new FullTimeEmployee("John Smith", LocalDate.of(2018, 8, 18), new BigDecimal("10000.0")));
		emplist.add(new PartTimeEmployee("Captain Jack", LocalDate.of(2019, 1, 1), new BigDecimal("10.0"), 100));
		emplist.add(new Consultant("Rose Tyler", LocalDate.of(2018, 7, 11), new BigDecimal("8000.0"), 10));		
	}

	@Test
	@DisplayName("Sort by employee name successfully")
	void testSortByName_Succeeds() {
		Employee[] empsSortedByName = new Employee[] {
			new PartTimeEmployee("Captain Jack", LocalDate.of(2019, 1, 1), new BigDecimal("30.0"), 100),
			new FullTimeEmployee("John Smith", LocalDate.of(2018, 8, 18), new BigDecimal("120000.0")),
			new Consultant("Rose Tyler", LocalDate.of(2018, 7, 11), new BigDecimal("150000.0"), 10)
		};
		
		EmployeeUtil.sortByName(emps);

		assertArrayEquals(empsSortedByName, emps);
	}
	
	@Test
	@DisplayName("Sort by monthly pay from high to low successfully")
	void testSortByMonthlyPay_Succeeds() {
		Employee[] empsSortedByMonthlyPay = new Employee[] {
			new Consultant("Rose Tyler", LocalDate.of(2018, 7, 11), new BigDecimal("150000.0"), 10),
			new FullTimeEmployee("John Smith", LocalDate.of(2018, 8, 18), new BigDecimal("120000.0")),
			new PartTimeEmployee("Captain Jack", LocalDate.of(2019, 1, 1), new BigDecimal("30.0"), 100)
		};
		
		EmployeeUtil.sortByMonthlyPay(emps);

		assertArrayEquals(empsSortedByMonthlyPay, emps);
	}

	@Test
	@DisplayName("Test for Total Monthly Pay Success")
	void test_totalMonthlyPayForAllEmployees_Success() {
		assertEquals(new BigDecimal("2633.33"), EmployeeUtil.totalMonthlyPayForAllEmployees(emplist));
	}
	
	@Test
	@DisplayName("Test for Total Monthly Pay Null Value Passes")
	void test_totalMonthlyPayForAllEmployees_Null() {
		BigDecimal totalMonthlyPay = EmployeeUtil.totalMonthlyPayForAllEmployees(null);
		assertEquals(new BigDecimal("0.00"), totalMonthlyPay);
	}
	
	@Test
	void testSort() {
		EmployeeUtil.sort(emps);
		assertEquals(pt, emps.get(0));
		assertEquals(ft, emps.get(1));
		assertEquals(con, emps.get(2));
	}

	// Test whole list in a single assertion
	@Test
	void testSortWithSingleAssertion() {
		List<Employee> expected = new ArrayList<>();
		expected.add(pt);
		expected.add(ft);
		expected.add(con);
		EmployeeUtil.sort(emps);
		assertIterableEquals(expected, emps);
	}

	// below negative tests to make sure arrays are valid and in bounds
	@Test
	void testTotalToDateNull() {
		assertEquals(new BigDecimal("0.00"), EmployeeUtil.calcTotalPayToDate(null, LocalDate.of(2018, 8, 11)));
	}

	@Test
	void testTotalSalaryNull() {
		assertEquals(new BigDecimal("0.00"), EmployeeUtil.calcTotalMonthlyPay(null));
	}
	
	
}